name: hosted-ninja-vcpkg-cacheoff
on: [ push, workflow_dispatch ]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.docker }}
    strategy:
      fail-fast: false
      matrix:
        name: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - name: windows-latest
            os: windows-latest
            vcpkgCommitId: 'c3801cf53c614ffc54c94051d124eba097b057b1'
          - name: ubuntu-latest
            os: ubuntu-latest
            vcpkgCommitId: 'c3801cf53c614ffc54c94051d124eba097b057b1'
            docker: "ubuntu:mantic"
          - name: ubuntu-latest-clang
            os: ubuntu-latest
            vcpkgCommitId: 'c3801cf53c614ffc54c94051d124eba097b057b1'
            docker: "ubuntu:mantic"
          - name: macos-latest
            os: macos-latest
            vcpkgCommitId: 'c3801cf53c614ffc54c94051d124eba097b057b1'

    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
      - name: install zip
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt-get update
          apt-get install -y gcc-13 g++-13 pkg-config
      - name: set compiler
        if: matrix.name == 'ubuntu-latest-clang'
        run: |
          apt-get update
          apt-get install -y clang-17 pkg-config
          clang-17 --version
        shell: bash
      - name: Dump the content of $RUNNER_TEMP
        run: find $RUNNER_TEMP
        shell: bash
      - name: Dump the content of $RUNNER_WORKSPACE
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Prints output of run-vcpkg's action
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}'"

      - name: Run CMake with vcpkg.json manifest clang
        if: matrix.name == 'ubuntu-latest-clang'
        uses: lukka/run-cmake@v10
        env:
          CC: clang-17
          CXX: clang++-17
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: ninja-multi-vcpkg
          buildPreset: ninja-multi-vcpkg
          testPreset: ninja-multi-vcpkg

      - name: Run CMake with vcpkg.json manifest clang
        if: matrix.name == 'ubuntu-latest'
        uses: lukka/run-cmake@v10
        env:
          CC: gcc-13
          CXX: g++-13
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: ninja-multi-vcpkg
          buildPreset: ninja-multi-vcpkg
          testPreset: ninja-multi-vcpkg

      - name: Run CMake with vcpkg.json manifest other compilers
        if: matrix.name != 'ubuntu-latest-clang'
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: ninja-multi-vcpkg
          buildPreset: ninja-multi-vcpkg
          testPreset: ninja-multi-vcpkg
